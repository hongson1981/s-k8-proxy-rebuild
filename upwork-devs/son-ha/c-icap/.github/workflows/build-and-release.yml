# This is a basic workflow to help you get started with Actions

name: CI
env:
  REPOSITORY: glasswallicap.azurecr.io
  IMAGE: icap-test
  RESOURCE_GROUP: gw-gks-icap-squid-proxy
  FQDN: glasswallicapcontainer
  CONTAINER_NAME: icap-container
# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
    paths-ignore: 
      - 'Documentation/**'
  pull_request:
    branches: [ master ]
    paths-ignore: 
      - 'Documentation/**'    

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:   
  build-and-release:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
      with:
        token: ${{ secrets.GW_SDK_TOKEN }} 
        submodules: true

    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REPOSITORY }} # default: index.docker.io
        username: ${{ secrets.REGISTRY_USER }} 
        password: ${{ secrets.REGISTRY_PASS }} 

    - run: |
        docker build . -t ${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ github.sha }}
        docker push ${{ env.REPOSITORY }}/${{ env.IMAGE}}:${{ github.sha }}
        az container delete --name ${{ env.CONTAINER_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --yes || true  

    # Deploy the ICAP container to Azure container instances using the recent build image in Azure container registry 
    - name: 'Deploy to Azure Container Instances'
      uses: 'azure/aci-deploy@v1'
      with:
        resource-group: ${{ env.RESOURCE_GROUP }}
        dns-name-label: ${{ env.FQDN }}
        image: ${{ env.REPOSITORY }}/${{ env.IMAGE}}:${{ github.sha }}
        registry-login-server: ${{ env.REPOSITORY }}
        registry-username: ${{ secrets.REGISTRY_USER }}
        registry-password: ${{ secrets.REGISTRY_PASS }}
        name: ${{ env.CONTAINER_NAME }}
        location: 'UK South'
